{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#explorando-machine-learning-na-pratica","title":"Explorando Machine Learning na pr\u00e1tica","text":"Curso <p>2025.2 Ci\u00eancia de dados </p>"},{"location":"#nome","title":"Nome","text":"<ul> <li>Artur Napoles de Oliveira</li> </ul> <p>Instru\u00e7\u00f5es</p> <p>Voc\u00eas devem utilizar este template como um bloco de notas para registrar o que foi feito e o que falta fazer. Voc\u00eas devem adicionar as informa\u00e7\u00f5es necess\u00e1rias. O template deve ser editado e atualizado a cada entrega, registrando assim a data de entrega e o que foi feito at\u00e9 o momento via Git.</p>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li> \u00c1rvore de Decis\u00e3o - Data 31/08/2025</li> <li> KNN - Data 14/09/2025</li> <li> K-means - Data 19/09/2025</li> <li> Roteiro 4</li> <li> Projeto</li> </ul>"},{"location":"#diagramas","title":"Diagramas","text":"<p>Use o Mermaid para criar os diagramas de documenta\u00e7\u00e3o.</p> <p>Mermaid Live Editor</p> <pre><code>flowchart TD\n    Deployment:::orange --&gt;|defines| ReplicaSet\n    ReplicaSet --&gt;|manages| pod((Pod))\n    pod:::red --&gt;|runs| Container\n    Deployment --&gt;|scales| pod\n    Deployment --&gt;|updates| pod\n\n    Service:::orange --&gt;|exposes| pod\n\n    subgraph  \n        ConfigMap:::orange\n        Secret:::orange\n    end\n\n    ConfigMap --&gt; Deployment\n    Secret --&gt; Deployment\n    classDef red fill:#f55\n    classDef orange fill:#ffa500</code></pre>"},{"location":"#codigos","title":"C\u00f3digos","text":"De um arquivo remotoAnota\u00e7\u00f5es no c\u00f3digo main.yaml<pre><code>name: ci\non:\n  - push\n  - pull_request\n\n# Environment\nenv:\n  CI: true\n  PYTHON_VERSION: 3.12\n\n# Jobs to run\njobs:\n\n  # Build and deploy documentation site\n  deploy:\n    if: github.event_name != 'pull_request' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n\n      # Checkout source form GitHub\n      - uses: actions/checkout@v4\n\n      # Install Python runtime and dependencies\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      # pip\n      - run: |\n          pip install -r requirements.txt\n\n      # deploy\n      - run: |\n          mkdocs gh-deploy --force\n</code></pre> compose.yaml<pre><code>name: app\n\n    db:\n        image: postgres:17\n        environment:\n            POSTGRES_DB: ${POSTGRES_DB:-projeto} # (1)!\n            POSTGRES_USER: ${POSTGRES_USER:-projeto}\n            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n        ports:\n            - 5432:5432 #(2)!\n</code></pre> <ol> <li> <p>Caso a vari\u00e1vel de ambiente <code>POSTGRES_DB</code> n\u00e3o exista ou seja nula - n\u00e3o seja definida no arquivo <code>.env</code> - o valor padr\u00e3o ser\u00e1 <code>projeto</code>. Vide documenta\u00e7\u00e3o.</p> </li> <li> <p>Aqui \u00e9 feito um t\u00fanel da porta 5432 do container do banco de dados para a porta 5432 do host (no caso localhost). Em um ambiente de produ\u00e7\u00e3o, essa porta n\u00e3o deve ser exposta, pois ningu\u00e9m de fora do compose deveria acessar o banco de dados diretamente.</p> </li> </ol>"},{"location":"#exemplo-de-video","title":"Exemplo de v\u00eddeo","text":"<p>Lorem ipsum dolor sit amet</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"K-means/main/","title":"K-means","text":""},{"location":"K-means/main/#exercicio-3-k-means","title":"Exercicio 3 - K-means","text":"<p>Esse exercicio \u00e9 baseado no dataset Crash Car do Kaggle. O objetivo \u00e9 analisar a base de dados, limp\u00e1-la e no final construir um modelo K-means</p>"},{"location":"K-means/main/#etapa-1-analise-e-instalacao-dos-dados","title":"Etapa 1 - Analise e instala\u00e7\u00e3o dos dados","text":"<p>O dataset foi carregado a partir de um arquivo Excel, contendo informa\u00e7\u00f5es como tipo de colis\u00e3o, tipo de les\u00e3o, dia da semana, fatores prim\u00e1rios do acidente, data, hora e localiza\u00e7\u00e3o.</p>"},{"location":"K-means/main/#carregando-os-dados","title":"Carregando os dados","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11)</p> <pre><code>import pandas as pd\n# Ler o arquivo corretamente (apenas )\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n\n# Visualiza\u00e7\u00e3o inicial da base de dados\nprint('Formato do dataset:', df.shape)\n</code></pre> <p>O dataset possui 53943 linha e 11 colunas.</p>"},{"location":"K-means/main/#as-bibiliotecas-utilizadas","title":"As bibiliotecas utilizadas","text":"<pre><code>    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from io import StringIO\n\n    from sklearn.datasets import make_classification\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.model_selection import train_test_split\n    from sklearn.neighbors import KNeighborsClassifier\n    from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n</code></pre>"},{"location":"K-means/main/#explicacao-dos-tipos-de-dados","title":"Explica\u00e7\u00e3o dos tipos de dados","text":"tipo de dadosC\u00f3digo <p>Year : int64 </p> <p>Month : int64 </p> <p>Day : int64 </p> <p>Weekend? : object </p> <p>Hour : float64 </p> <p>Collision Type : object </p> <p>Injury Type : object </p> <p>Primary Factor : object </p> <p>Reported_Location : object </p> <p>Latitude : float64 </p> <p>Longitude : float64 </p> <pre><code>    for col in df:\n    print(col, \":\", df[col].dtype, \"\\n\")\n</code></pre> <p>Explica\u00e7\u00e3o</p> <p>Int64: Dados num\u00e9ricos inteiros, como Year, Month, Day, Hour e Latitude. Object: Dados categ\u00f3ricos ou textuais, como Collision Type, Injury Type, Weekend?, Primary Factor e Time. FLoat64: Dados num\u00e9ricos com casas decimais, como Longitude, Latitude e Hora.</p>"},{"location":"K-means/main/#estatisticas-descritivas-dos-numericos","title":"Estatisticas descritivas dos num\u00e9ricos","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11) Estat\u00edsticas das colunas num\u00e9ricas:</p> Year Month Day Hour Latitude 53566 2003 6 4 900.0 0.000000 40835 2006 2 3 700.0 0.000000 14863 2012 7 5 1700.0 39.164240 14028 2012 3 6 1400.0 39.168619 45347 2004 8 2 2100.0 39.208858 7264 2014 4 1 1500.0 39.150350 4823 2014 7 5 1500.0 39.193771 9149 2013 11 7 400.0 39.182689 50126 2003 3 2 1500.0 39.178928 38629 2006 9 5 1800.0 39.166768 <pre><code># Estat\u00edsticas descritivas das colunas num\u00e9ricas\nprint('Estat\u00edsticas das colunas num\u00e9ricas:')\nprint(df[['Year', 'Month', 'Day', 'Hour', 'Latitude']].describe())\n</code></pre>"},{"location":"K-means/main/#visualizacao-dos-dados","title":"Visualiza\u00e7\u00e3o dos dados","text":"2025-09-26T12:31:54.370904 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ 2025-09-26T12:31:54.437449 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <p>Visualiza\u00e7\u00f5es: Foram criados gr\u00e1ficos de barras para o n\u00famero de acidentes por tipo de ve\u00edculo e por gravidade (fatal/n\u00e3o fatal), facilitando a compreens\u00e3o dos dados.</p>"},{"location":"K-means/main/#exploracao-inicial-dos-dados","title":"Explora\u00e7\u00e3o inicial dos dados","text":"<pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n\n# Visualiza\u00e7\u00e3o inicial da base de dados\nprint(f'Formato do dataset: {df.shape}&lt;br&gt;')\n\n# Explica\u00e7\u00e3o de tipo de dado em cada coluna\nfor col in df:\n    print(df[col].head(1), \"&lt;br&gt;\")\nprint('Valores nulos por coluna:')\nprint(df.isnull().sum(), \"&lt;br&gt;\")\n\n\n################################################\n# Estat\u00edsticas descritivas das colunas num\u00e9ricas\nprint('Estat\u00edsticas das colunas num\u00e9ricas:')\nprint(df[['Year', 'Month', 'Day', 'Hour', 'Latitude']].describe())\n</code></pre>"},{"location":"K-means/main/#etapa-2","title":"Etapa 2","text":""},{"location":"K-means/main/#normalizacao-de-dados-categoricos-em-numericos","title":"Normaliza\u00e7\u00e3o de dados categ\u00f3ricos em num\u00e9ricos","text":"Tipo de Colis\u00e3oTipo de Les\u00e3oDia da semanaMotivo les\u00e3o Sa\u00eddaC\u00f3digo Collision Type Collision Type Num 0 2-Car 1 1 2-Car 1 2 2-Car 1 3 2-Car 1 4 2-Car 1 5 2-Car 1 6 2-Car 1 7 1-Car 1 8 2-Car 1 9 1-Car 1 <pre><code>def collision_to_num(collision):\n    if collision == '1-Car' or collision == '2-Car' or collision == '3+ Cars':\n        return 1\n    elif collision == 'Moped/Motorcycle':\n        return 2\n    elif collision == 'Bus':\n        return 3\n    elif collision == 'Pedestrian':\n        return 4\n    elif collision == 'Cyclist':\n        return 5\n    else:\n        return 0\ndf['Collision Type Num'] = df['Collision Type'].apply(collision_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Injury Type Injury Type Num 0 No injury/unknown 0 1 No injury/unknown 0 2 Non-incapacitating 0 3 Non-incapacitating 0 4 No injury/unknown 0 5 No injury/unknown 0 6 No injury/unknown 0 7 Incapacitating 0 8 No injury/unknown 0 9 No injury/unknown 0 <pre><code>def injury_to_num(injury):\n    if injury == 'Fatal':\n        return 1\n    else:\n        return 0\n\ndf['Injury Type Num'] = df['Injury Type'].apply(injury_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Weekend? Weekend Num 0 Weekday 2 1 Weekday 2 2 Weekend 1 3 Weekend 1 4 Weekend 1 5 Weekday 2 6 Weekday 2 7 Weekday 2 8 Weekend 1 9 Weekend 1 <pre><code>def weekend_to_num(value):\n    if str(value).lower() == 'weekend':\n        return 1\n    elif str(value).lower() == 'weekday':\n        return 2\n    else:\n        return 0\ndf['Weekend Num'] = df['Weekend?'].apply(weekend_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Primary Factor Primary Factor Num 0 OTHER (DRIVER) - EXPLAIN IN NARRATIVE 0 1 FOLLOWING TOO CLOSELY 1 2 DISREGARD SIGNAL/REG SIGN 1 3 FAILURE TO YIELD RIGHT OF WAY 1 4 FAILURE TO YIELD RIGHT OF WAY 1 5 FAILURE TO YIELD RIGHT OF WAY 1 6 DRIVER DISTRACTED - EXPLAIN IN NARRATIVE 5 7 ENGINE FAILURE OR DEFECTIVE 3 8 FOLLOWING TOO CLOSELY 1 9 RAN OFF ROAD RIGHT 1 <p>1 = Erros de julgamento do motorista 2 = Velocidade / comportamento arriscado 3 = Falhas mec\u00e2nicas 4 = Condi\u00e7\u00f5es da estrada / ambientais 5 = Distra\u00e7\u00f5es 6 = Uso de Subst\u00e2ncias 7 = Fatores diversos 8 = Outros</p> <pre><code>def primary_factor_to_num(factor):\n    if factor == 'Erros de julgamento do motorista':\n        return 1\n    elif factor == 'Velocidade / comportamento arriscado':\n        return 2\n    elif factor == 'Falhas mec\u00e2nicas':\n        return 3\n    elif factor == 'Condi\u00e7\u00f5es da estrada / ambientais':\n        return 4\n    elif factor == 'Distra\u00e7\u00f5es':\n        return 5\n    elif factor == 'Uso de Subst\u00e2ncias':\n        return 6\n    elif factor == 'Fatores diversos':\n        return 7\n    else:\n        return 0  # Outros / n\u00e3o especificado\ndf['Primary Factor Num'] = df['Primary Factor'].apply(primary_factor_to_num)\n</code></pre> <p>Convers\u00e3o de vari\u00e1veis categ\u00f3ricas em num\u00e9ricas: tipo de colis\u00e3o, tipo de les\u00e3o, dia da semana e fator prim\u00e1rio foram transformados em vari\u00e1veis num\u00e9ricas para facilitar os proximos processos e estabelecer uma normaliza\u00e7\u00e3o.</p>"},{"location":"K-means/main/#limpeza","title":"Limpeza","text":"Sa\u00eddaC\u00f3digo <p>Tamanho do dataset antes remo\u00e7\u00e3o de valores ausentes (53943, 11) Tamanho do dataset ap\u00f3s remo\u00e7\u00e3o de valores ausentes (52582, 11)</p> <pre><code>print(df.shape)\nprint(\"Tamanho do dataset antes remo\u00e7\u00e3o de valores ausentes\")\ndf = df.dropna()\nprint(df.shape)\nprint(\"Tamanho do dataset ap\u00f3s remo\u00e7\u00e3o de valores ausentes\")\n</code></pre> <p>Todos os registros com valores ausentes foram removidos, garantindo a integridade dos dados para o treinamento do modelo</p>"},{"location":"K-means/main/#etapa-3","title":"Etapa 3","text":""},{"location":"K-means/main/#separacao-em-treino-e-teste-k-means","title":"Separa\u00e7\u00e3o em treino e teste / K-means","text":"Sa\u00eddaC\u00f3digo <p>Centroides dos clusters (em escala padronizada): [[ 1.58664005e-03  1.00780294e-02  3.92705724e-01 -2.91278088e-02    2.42895792e-03 -2.76172190e-02 -4.68172396e-02 -1.75496989e+00    6.39398256e-02]  [-1.98031270e-04 -3.17567629e-03 -1.27472120e-01  1.13718837e-02   -1.08655260e-03  7.45303835e-03 -4.68172396e-02  5.69810347e-01   -2.05893568e-02]  [-1.08960236e-01 -3.12968195e-02  6.46580913e-02 -6.65313678e-01    1.03116990e-01  5.16250018e-01  2.13596531e+01 -3.39886266e-01   -4.64913543e-02]]</p> <p>Quantidade de registros por cluster: Cluster 1    39624 0    12843 2      115 Name: count, dtype: int64</p> <pre><code>##########################################\n# Aplicando o modelo K-Means\n\n# Definindo n\u00famero de clusters (ex: 3, mas pode ajustar)\nkmeans = KMeans(n_clusters=3, init='k-means++', random_state=42, n_init=10)\nkmeans.fit(X_scaled)\n\n# Atribui os clusters ao dataframe\ndf['Cluster'] = kmeans.labels_\n</code></pre>"},{"location":"K-means/main/#grafico-simples","title":"Grafico simples","text":"Sa\u00edda 2025-09-26T12:32:22.599097 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/"},{"location":"K-means/main/#grafico-cluster","title":"Grafico cluster","text":"Sa\u00edda 2025-09-26T12:32:30.552977 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/"},{"location":"KNN/main/","title":"KNN","text":""},{"location":"KNN/main/#exercicio-2-knn","title":"Exercicio 2 KNN","text":"<p>Esse exercicio \u00e9 baseado no dataset Crash Car do Kaggle. O objetivo \u00e9 analisar a base de dados, limp\u00e1-la e no final construir um modelo KNN</p>"},{"location":"KNN/main/#etapa-1-analise-e-instalacao-dos-dados","title":"Etapa 1 - Analise e instala\u00e7\u00e3o dos dados","text":"<p>O dataset foi carregado a partir de um arquivo Excel, contendo informa\u00e7\u00f5es como tipo de colis\u00e3o, tipo de les\u00e3o, dia da semana, fatores prim\u00e1rios do acidente, data, hora e localiza\u00e7\u00e3o.</p>"},{"location":"KNN/main/#carregando-os-dados","title":"Carregando os dados","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11)</p> <pre><code>import pandas as pd\n# Ler o arquivo corretamente (apenas )\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n\n# Visualiza\u00e7\u00e3o inicial da base de dados\nprint('Formato do dataset:', df.shape)\n</code></pre> <p>O dataset possui 53943 linha e 11 colunas.</p>"},{"location":"KNN/main/#as-bibiliotecas-utilizadas","title":"As bibiliotecas utilizadas","text":"<pre><code>    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from io import StringIO\n\n    from sklearn.datasets import make_classification\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.model_selection import train_test_split\n    from sklearn.neighbors import KNeighborsClassifier\n    from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n</code></pre>"},{"location":"KNN/main/#explicacao-dos-tipos-de-dados","title":"Explica\u00e7\u00e3o dos tipos de dados","text":"tipo de dadosC\u00f3digo <p>Year : int64 </p> <p>Month : int64 </p> <p>Day : int64 </p> <p>Weekend? : object </p> <p>Hour : float64 </p> <p>Collision Type : object </p> <p>Injury Type : object </p> <p>Primary Factor : object </p> <p>Reported_Location : object </p> <p>Latitude : float64 </p> <p>Longitude : float64 </p> <pre><code>    for col in df:\n    print(col, \":\", df[col].dtype, \"\\n\")\n</code></pre> <p>Explica\u00e7\u00e3o</p> <p>Int64: Dados num\u00e9ricos inteiros, como Year, Month, Day, Hour e Latitude. Object: Dados categ\u00f3ricos ou textuais, como Collision Type, Injury Type, Weekend?, Primary Factor e Time. FLoat64: Dados num\u00e9ricos com casas decimais, como Longitude, Latitude e Hora.</p>"},{"location":"KNN/main/#estatisticas-descritivas-dos-numericos","title":"Estatisticas descritivas dos num\u00e9ricos","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11) Estat\u00edsticas das colunas num\u00e9ricas:</p> Year Month Day Hour Latitude 52972 2003 9 1 500.0 39.129395 27402 2009 12 5 1300.0 39.155688 3958 2015 11 2 1300.0 39.165562 40878 2006 4 5 1400.0 0.000000 8384 2014 10 4 1200.0 0.000000 53166 2003 3 3 500.0 39.099918 38421 2006 10 4 1500.0 39.169584 49319 2003 6 2 2100.0 39.339296 27797 2009 7 6 2300.0 39.139344 12492 2013 10 3 500.0 0.000000 <pre><code># Estat\u00edsticas descritivas das colunas num\u00e9ricas\nprint('Estat\u00edsticas das colunas num\u00e9ricas:')\nprint(df[['Year', 'Month', 'Day', 'Hour', 'Latitude']].describe())\n</code></pre>"},{"location":"KNN/main/#visualizacao-dos-dados","title":"Visualiza\u00e7\u00e3o dos dados","text":"2025-09-26T12:32:49.923390 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ 2025-09-26T12:32:49.988094 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <p>Visualiza\u00e7\u00f5es: Foram criados gr\u00e1ficos de barras para o n\u00famero de acidentes por tipo de ve\u00edculo e por gravidade (fatal/n\u00e3o fatal), facilitando a compreens\u00e3o dos dados.</p>"},{"location":"KNN/main/#exploracao-inicial-dos-dados","title":"Explora\u00e7\u00e3o inicial dos dados","text":"<pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n\n# Visualiza\u00e7\u00e3o inicial da base de dados\nprint(f'Formato do dataset: {df.shape}&lt;br&gt;')\n\n# Explica\u00e7\u00e3o de tipo de dado em cada coluna\nfor col in df:\n    print(df[col].head(1), \"&lt;br&gt;\")\nprint('Valores nulos por coluna:')\nprint(df.isnull().sum(), \"&lt;br&gt;\")\n\n\n################################################\n# Estat\u00edsticas descritivas das colunas num\u00e9ricas\nprint('Estat\u00edsticas das colunas num\u00e9ricas:')\nprint(df[['Year', 'Month', 'Day', 'Hour', 'Latitude']].describe())\n</code></pre>"},{"location":"KNN/main/#etapa-2","title":"Etapa 2","text":""},{"location":"KNN/main/#normalizacao-de-dados-categoricos-em-numericos","title":"Normaliza\u00e7\u00e3o de dados categ\u00f3ricos em num\u00e9ricos","text":"Tipo de Colis\u00e3oTipo de Les\u00e3oDia da semanaMotivo les\u00e3o Sa\u00eddaC\u00f3digo Collision Type Collision Type Num 0 2-Car 1 1 2-Car 1 2 2-Car 1 3 2-Car 1 4 2-Car 1 5 2-Car 1 6 2-Car 1 7 1-Car 1 8 2-Car 1 9 1-Car 1 <pre><code>def collision_to_num(collision):\n    if collision == '1-Car' or collision == '2-Car' or collision == '3+ Cars':\n        return 1\n    elif collision == 'Moped/Motorcycle':\n        return 2\n    elif collision == 'Bus':\n        return 3\n    elif collision == 'Pedestrian':\n        return 4\n    elif collision == 'Cyclist':\n        return 5\n    else:\n        return 0\ndf['Collision Type Num'] = df['Collision Type'].apply(collision_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Injury Type Injury Type Num 0 No injury/unknown 0 1 No injury/unknown 0 2 Non-incapacitating 0 3 Non-incapacitating 0 4 No injury/unknown 0 5 No injury/unknown 0 6 No injury/unknown 0 7 Incapacitating 0 8 No injury/unknown 0 9 No injury/unknown 0 <pre><code>def injury_to_num(injury):\n    if injury == 'Fatal':\n        return 1\n    else:\n        return 0\n\ndf['Injury Type Num'] = df['Injury Type'].apply(injury_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Weekend? Weekend Num 0 Weekday 2 1 Weekday 2 2 Weekend 1 3 Weekend 1 4 Weekend 1 5 Weekday 2 6 Weekday 2 7 Weekday 2 8 Weekend 1 9 Weekend 1 <pre><code>def weekend_to_num(value):\n    if str(value).lower() == 'weekend':\n        return 1\n    elif str(value).lower() == 'weekday':\n        return 2\n    else:\n        return 0\ndf['Weekend Num'] = df['Weekend?'].apply(weekend_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Primary Factor Primary Factor Num 0 OTHER (DRIVER) - EXPLAIN IN NARRATIVE 0 1 FOLLOWING TOO CLOSELY 1 2 DISREGARD SIGNAL/REG SIGN 1 3 FAILURE TO YIELD RIGHT OF WAY 1 4 FAILURE TO YIELD RIGHT OF WAY 1 5 FAILURE TO YIELD RIGHT OF WAY 1 6 DRIVER DISTRACTED - EXPLAIN IN NARRATIVE 5 7 ENGINE FAILURE OR DEFECTIVE 3 8 FOLLOWING TOO CLOSELY 1 9 RAN OFF ROAD RIGHT 1 <p>1 = Erros de julgamento do motorista 2 = Velocidade / comportamento arriscado 3 = Falhas mec\u00e2nicas 4 = Condi\u00e7\u00f5es da estrada / ambientais 5 = Distra\u00e7\u00f5es 6 = Uso de Subst\u00e2ncias 7 = Fatores diversos 8 = Outros</p> <pre><code>def primary_factor_to_num(factor):\n    if factor == 'Erros de julgamento do motorista':\n        return 1\n    elif factor == 'Velocidade / comportamento arriscado':\n        return 2\n    elif factor == 'Falhas mec\u00e2nicas':\n        return 3\n    elif factor == 'Condi\u00e7\u00f5es da estrada / ambientais':\n        return 4\n    elif factor == 'Distra\u00e7\u00f5es':\n        return 5\n    elif factor == 'Uso de Subst\u00e2ncias':\n        return 6\n    elif factor == 'Fatores diversos':\n        return 7\n    else:\n        return 0  # Outros / n\u00e3o especificado\ndf['Primary Factor Num'] = df['Primary Factor'].apply(primary_factor_to_num)\n</code></pre> <p>Convers\u00e3o de vari\u00e1veis categ\u00f3ricas em num\u00e9ricas: tipo de colis\u00e3o, tipo de les\u00e3o, dia da semana e fator prim\u00e1rio foram transformados em vari\u00e1veis num\u00e9ricas para facilitar os proximos processos e estabelecer uma normaliza\u00e7\u00e3o.</p>"},{"location":"KNN/main/#limpeza","title":"Limpeza","text":"Sa\u00eddaC\u00f3digo <p>Tamanho do dataset antes remo\u00e7\u00e3o de valores ausentes (53943, 11) Tamanho do dataset ap\u00f3s remo\u00e7\u00e3o de valores ausentes (52582, 11)</p> <pre><code>print(df.shape)\nprint(\"Tamanho do dataset antes remo\u00e7\u00e3o de valores ausentes\")\ndf = df.dropna()\nprint(df.shape)\nprint(\"Tamanho do dataset ap\u00f3s remo\u00e7\u00e3o de valores ausentes\")\n</code></pre> <p>Todos os registros com valores ausentes foram removidos, garantindo a integridade dos dados para o treinamento do modelo</p>"},{"location":"KNN/main/#etapa-3","title":"Etapa 3","text":""},{"location":"KNN/main/#separacao-em-treino-e-teste-knn","title":"Separa\u00e7\u00e3o em treino e teste / KNN","text":"Sa\u00eddaC\u00f3digo <p>Distribui\u00e7\u00e3o das classes: Injury Type Num 0    52467 1      115 Name: count, dtype: int64 Propor\u00e7\u00e3o de acidentes fatais: 0.0022 Acur\u00e1cia do modelo: 0.9978</p> <p>Relat\u00f3rio de Classifica\u00e7\u00e3o:               precision    recall  f1-score   support</p> <p>N\u00e3o Fatal       1.00      1.00      1.00     10494        Fatal       0.00      0.00      0.00        23</p> <pre><code>accuracy                           1.00     10517\n</code></pre> <p>macro avg       0.50      0.50      0.50     10517 weighted avg       1.00      1.00      1.00     10517</p> <pre><code>    # Selecionar features para o modelo\n    features = ['Year', 'Month', 'Day', 'Hour', 'Collision Type Num', 'Weekend Num', 'Primary Factor Num', 'Latitude', 'Longitude']\n    X = df[features]\n    y = df['Injury Type Num']  # Vari\u00e1vel alvo: 1 para fatal, 0 para n\u00e3o fatal\n\n    # Verificar balanceamento das classes\n    print(\"Distribui\u00e7\u00e3o das classes:&lt;br&gt;\")\n\n    print(y.value_counts())\n    print(f\"&lt;br&gt;Propor\u00e7\u00e3o de acidentes fatais: {y.mean():.4f}&lt;br&gt;\")\n\n    # Dividir os dados em treino e teste\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\n    # Normalizar os dados\n    scaler = StandardScaler()\n    X_train_scaled = scaler.fit_transform(X_train)\n    X_test_scaled = scaler.transform(X_test)\n\n    # Implementa\u00e7\u00e3o do KNN\n    class KNNClassifier:\n        def __init__(self, k=3):\n            self.k = k\n\n        def fit(self, X, y):\n            self.X_train = X\n            self.y_train = y\n\n        def predict(self, X):\n            predictions = [self._predict(x) for x in X]\n            return np.array(predictions)\n\n        def _predict(self, x):\n            # Calcular dist\u00e2ncias euclidianas\n            distances = [np.sqrt(np.sum((x - x_train)**2)) for x_train in self.X_train]\n            # Obter \u00edndices dos k-vizinhos mais pr\u00f3ximos\n            k_indices = np.argsort(distances)[:self.k]\n            # Obter os r\u00f3tulos correspondentes\n            k_nearest_labels = [self.y_train.iloc[i] for i in k_indices]\n            # Retornar a classe majorit\u00e1ria\n            most_common = max(set(k_nearest_labels), key=k_nearest_labels.count)\n            return most_common\n\n    # Treinar e avaliar o modelo\n\n    knn = KNeighborsClassifier(n_neighbors=5)\n    knn.fit(X_train_scaled, y_train)\n    predictions = knn.predict(X_test_scaled)\n    # M\u00e9tricas de avalia\u00e7\u00e3o\n    accuracy = accuracy_score(y_test, predictions)\n</code></pre>"},{"location":"KNN/main/#matriz","title":"Matriz","text":"Sa\u00eddaC\u00f3digo <pre><code>plt.figure(figsize=(6, 5))\nplt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\nplt.title('Matriz de Confus\u00e3o')\nplt.colorbar()\ntick_marks = range(len(cm))\nplt.xticks(tick_marks, ['N\u00e3o Fatal', 'Fatal'])\nplt.yticks(tick_marks, ['N\u00e3o Fatal', 'Fatal'])\nplt.xlabel('Predito')\nplt.ylabel('Real')\n\nfor i in range(cm.shape[0]):\n    for j in range(cm.shape[1]):\n        plt.text(j, i, str(cm[i, j]), ha='center', va='center', color='black')\n\nplt.tight_layout()\nbuffer = StringIO()\nplt.savefig(buffer, format=\"svg\", transparent=True)\nplt.close()\nprint(buffer.getvalue())\n</code></pre> 2025-09-26T12:33:18.755716 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/"},{"location":"KNN/main/#grafico-de-fronteira","title":"Grafico de Fronteira","text":"Sa\u00eddaC\u00f3digo <p>Propor\u00e7\u00e3o de acidentes fatais: 0.0022 Acur\u00e1cia: 0.95  2025-09-26T12:33:23.722872 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ </p> <pre><code># Visualizar fronteira de decis\u00e3o\nh = 0.02\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = knn.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\n\nplt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu, alpha=0.3)\nfor label in np.unique(y):\n    plt.scatter(X[y == label, 0], X[y == label, 1], label=f\"Classe {label}\", s=100)\nplt.xlabel(\"Chance de acidente fatal\")\nplt.ylabel(\"Chance de acidente n\u00e3o fatal\")\nplt.title(\"Fronteira de Decis\u00e3o KNN \")\nplt.legend()\n\nbuffer = StringIO()\nplt.savefig(buffer, format=\"svg\", transparent=True)\nplt.close()\n\nprint(buffer.getvalue())\n</code></pre>"},{"location":"Metrics/main/","title":"Metrics","text":""},{"location":"Metrics/main/#exercicio-3-k-means","title":"Exercicio 3 - K-means","text":"<p>Esse exercicio \u00e9 baseado no dataset Crash Car do Kaggle. O objetivo \u00e9 analisar a base de dados, limp\u00e1-la e no final construir um modelo Metrics an Evaluation </p>"},{"location":"Metrics/main/#etapa-1-analise-e-instalacao-dos-dados","title":"Etapa 1 - Analise e instala\u00e7\u00e3o dos dados","text":"<p>O dataset foi carregado a partir de um arquivo Excel, contendo informa\u00e7\u00f5es como tipo de colis\u00e3o, tipo de les\u00e3o, dia da semana, fatores prim\u00e1rios do acidente, data, hora e localiza\u00e7\u00e3o.</p>"},{"location":"Metrics/main/#carregando-os-dados","title":"Carregando os dados","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11)</p> <pre><code>import pandas as pd\n# Ler o arquivo corretamente (apenas )\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n\n# Visualiza\u00e7\u00e3o inicial da base de dados\nprint('Formato do dataset:', df.shape)\n</code></pre> <p>O dataset possui 53943 linha e 11 colunas.</p>"},{"location":"Metrics/main/#as-bibiliotecas-utilizadas","title":"As bibiliotecas utilizadas","text":"<pre><code>    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from io import StringIO\n\n    from sklearn.datasets import make_classification\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.model_selection import train_test_split\n    from sklearn.neighbors import KNeighborsClassifier\n    from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n</code></pre>"},{"location":"Metrics/main/#explicacao-dos-tipos-de-dados","title":"Explica\u00e7\u00e3o dos tipos de dados","text":"tipo de dadosC\u00f3digo <p>Year : int64 </p> <p>Month : int64 </p> <p>Day : int64 </p> <p>Weekend? : object </p> <p>Hour : float64 </p> <p>Collision Type : object </p> <p>Injury Type : object </p> <p>Primary Factor : object </p> <p>Reported_Location : object </p> <p>Latitude : float64 </p> <p>Longitude : float64 </p> <pre><code>    for col in df:\n    print(col, \":\", df[col].dtype, \"\\n\")\n</code></pre> <p>Explica\u00e7\u00e3o</p> <p>Int64: Dados num\u00e9ricos inteiros, como Year, Month, Day, Hour e Latitude. Object: Dados categ\u00f3ricos ou textuais, como Collision Type, Injury Type, Weekend?, Primary Factor e Time. FLoat64: Dados num\u00e9ricos com casas decimais, como Longitude, Latitude e Hora.</p>"},{"location":"Metrics/main/#estatisticas-descritivas-dos-numericos","title":"Estatisticas descritivas dos num\u00e9ricos","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11) Estat\u00edsticas das colunas num\u00e9ricas:</p> Year Month Day Hour Latitude 32953 2008 9 3 2300.0 0.000000 47487 2004 7 7 1600.0 39.164240 49039 2004 5 6 900.0 0.000000 43976 2005 12 1 800.0 39.144848 7082 2014 5 4 1500.0 39.155567 33414 2007 11 2 1100.0 39.190672 37720 2006 7 2 800.0 39.179100 14653 2012 4 7 1400.0 39.164304 49267 2004 11 1 800.0 0.000000 8415 2014 12 4 1300.0 0.000000 <pre><code># Estat\u00edsticas descritivas das colunas num\u00e9ricas\nprint('Estat\u00edsticas das colunas num\u00e9ricas:')\nprint(df[['Year', 'Month', 'Day', 'Hour', 'Latitude']].describe())\n</code></pre>"},{"location":"Metrics/main/#visualizacao-dos-dados","title":"Visualiza\u00e7\u00e3o dos dados","text":"2025-09-26T12:33:39.216600 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ 2025-09-26T12:33:39.282555 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <p>Visualiza\u00e7\u00f5es: Foram criados gr\u00e1ficos de barras para o n\u00famero de acidentes por tipo de ve\u00edculo e por gravidade (fatal/n\u00e3o fatal), facilitando a compreens\u00e3o dos dados.</p>"},{"location":"Metrics/main/#exploracao-inicial-dos-dados","title":"Explora\u00e7\u00e3o inicial dos dados","text":"<pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n\n# Visualiza\u00e7\u00e3o inicial da base de dados\nprint(f'Formato do dataset: {df.shape}&lt;br&gt;')\n\n# Explica\u00e7\u00e3o de tipo de dado em cada coluna\nfor col in df:\n    print(df[col].head(1), \"&lt;br&gt;\")\nprint('Valores nulos por coluna:')\nprint(df.isnull().sum(), \"&lt;br&gt;\")\n\n\n################################################\n# Estat\u00edsticas descritivas das colunas num\u00e9ricas\nprint('Estat\u00edsticas das colunas num\u00e9ricas:')\nprint(df[['Year', 'Month', 'Day', 'Hour', 'Latitude']].describe())\n</code></pre>"},{"location":"Metrics/main/#etapa-2","title":"Etapa 2","text":""},{"location":"Metrics/main/#normalizacao-de-dados-categoricos-em-numericos","title":"Normaliza\u00e7\u00e3o de dados categ\u00f3ricos em num\u00e9ricos","text":"Tipo de Colis\u00e3oTipo de Les\u00e3oDia da semanaMotivo les\u00e3o Sa\u00eddaC\u00f3digo Collision Type Collision Type Num 0 2-Car 1 1 2-Car 1 2 2-Car 1 3 2-Car 1 4 2-Car 1 5 2-Car 1 6 2-Car 1 7 1-Car 1 8 2-Car 1 9 1-Car 1 <pre><code>def collision_to_num(collision):\n    if collision == '1-Car' or collision == '2-Car' or collision == '3+ Cars':\n        return 1\n    elif collision == 'Moped/Motorcycle':\n        return 2\n    elif collision == 'Bus':\n        return 3\n    elif collision == 'Pedestrian':\n        return 4\n    elif collision == 'Cyclist':\n        return 5\n    else:\n        return 0\ndf['Collision Type Num'] = df['Collision Type'].apply(collision_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Injury Type Injury Type Num 0 No injury/unknown 0 1 No injury/unknown 0 2 Non-incapacitating 0 3 Non-incapacitating 0 4 No injury/unknown 0 5 No injury/unknown 0 6 No injury/unknown 0 7 Incapacitating 0 8 No injury/unknown 0 9 No injury/unknown 0 <pre><code>def injury_to_num(injury):\n    if injury == 'Fatal':\n        return 1\n    else:\n        return 0\n\ndf['Injury Type Num'] = df['Injury Type'].apply(injury_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Weekend? Weekend Num 0 Weekday 2 1 Weekday 2 2 Weekend 1 3 Weekend 1 4 Weekend 1 5 Weekday 2 6 Weekday 2 7 Weekday 2 8 Weekend 1 9 Weekend 1 <pre><code>def weekend_to_num(value):\n    if str(value).lower() == 'weekend':\n        return 1\n    elif str(value).lower() == 'weekday':\n        return 2\n    else:\n        return 0\ndf['Weekend Num'] = df['Weekend?'].apply(weekend_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Primary Factor Primary Factor Num 0 OTHER (DRIVER) - EXPLAIN IN NARRATIVE 0 1 FOLLOWING TOO CLOSELY 1 2 DISREGARD SIGNAL/REG SIGN 1 3 FAILURE TO YIELD RIGHT OF WAY 1 4 FAILURE TO YIELD RIGHT OF WAY 1 5 FAILURE TO YIELD RIGHT OF WAY 1 6 DRIVER DISTRACTED - EXPLAIN IN NARRATIVE 5 7 ENGINE FAILURE OR DEFECTIVE 3 8 FOLLOWING TOO CLOSELY 1 9 RAN OFF ROAD RIGHT 1 <p>1 = Erros de julgamento do motorista 2 = Velocidade / comportamento arriscado 3 = Falhas mec\u00e2nicas 4 = Condi\u00e7\u00f5es da estrada / ambientais 5 = Distra\u00e7\u00f5es 6 = Uso de Subst\u00e2ncias 7 = Fatores diversos 8 = Outros</p> <pre><code>def primary_factor_to_num(factor):\n    if factor == 'Erros de julgamento do motorista':\n        return 1\n    elif factor == 'Velocidade / comportamento arriscado':\n        return 2\n    elif factor == 'Falhas mec\u00e2nicas':\n        return 3\n    elif factor == 'Condi\u00e7\u00f5es da estrada / ambientais':\n        return 4\n    elif factor == 'Distra\u00e7\u00f5es':\n        return 5\n    elif factor == 'Uso de Subst\u00e2ncias':\n        return 6\n    elif factor == 'Fatores diversos':\n        return 7\n    else:\n        return 0  # Outros / n\u00e3o especificado\ndf['Primary Factor Num'] = df['Primary Factor'].apply(primary_factor_to_num)\n</code></pre> <p>Convers\u00e3o de vari\u00e1veis categ\u00f3ricas em num\u00e9ricas: tipo de colis\u00e3o, tipo de les\u00e3o, dia da semana e fator prim\u00e1rio foram transformados em vari\u00e1veis num\u00e9ricas para facilitar os proximos processos e estabelecer uma normaliza\u00e7\u00e3o.</p>"},{"location":"Metrics/main/#limpeza","title":"Limpeza","text":"Sa\u00eddaC\u00f3digo <p>Tamanho do dataset antes remo\u00e7\u00e3o de valores ausentes (53943, 11) Tamanho do dataset ap\u00f3s remo\u00e7\u00e3o de valores ausentes (52582, 11)</p> <pre><code>print(df.shape)\nprint(\"Tamanho do dataset antes remo\u00e7\u00e3o de valores ausentes\")\ndf = df.dropna()\nprint(df.shape)\nprint(\"Tamanho do dataset ap\u00f3s remo\u00e7\u00e3o de valores ausentes\")\n</code></pre> <p>Todos os registros com valores ausentes foram removidos, garantindo a integridade dos dados para o treinamento do modelo</p>"},{"location":"Metrics/main/#etapa-3","title":"Etapa 3","text":""},{"location":"Metrics/main/#separacao-em-treino-e-teste-metrics","title":"Separa\u00e7\u00e3o em treino e teste / Metrics","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11)</p> Primary Factor Primary Factor Num 0 OTHER (DRIVER) - EXPLAIN IN NARRATIVE 0 1 FOLLOWING TOO CLOSELY 1 2 DISREGARD SIGNAL/REG SIGN 1 3 FAILURE TO YIELD RIGHT OF WAY 1 4 FAILURE TO YIELD RIGHT OF WAY 1 5 FAILURE TO YIELD RIGHT OF WAY 1 6 DRIVER DISTRACTED - EXPLAIN IN NARRATIVE 5 7 ENGINE FAILURE OR DEFECTIVE 3 8 FOLLOWING TOO CLOSELY 1 9 RAN OFF ROAD RIGHT 1 <p>Accuracy: 0.995 Precis\u00e3o: 0.035 Recall: 0.074 F1-Score: 0.048</p> <pre><code>##########################################\n# Aplicando o modelo K-Means\n\n# Definindo n\u00famero de clusters (ex: 3, mas pode ajustar)\nkmeans = KMeans(n_clusters=3, init='k-means++', random_state=42, n_init=10)\nkmeans.fit(X_scaled)\n\n# Atribui os clusters ao dataframe\ndf['Cluster'] = kmeans.labels_\n</code></pre>"},{"location":"Metrics/main/#roc","title":"Roc","text":"Sa\u00edda <p>Formato do dataset: (53943, 11) Primary Factor Primary Factor Num 0 OTHER (DRIVER) - EXPLAIN IN NARRATIVE 0 1 FOLLOWING TOO CLOSELY 1 2 DISREGARD SIGNAL/REG SIGN 1 3 FAILURE TO YIELD RIGHT OF WAY 1 4 FAILURE TO YIELD RIGHT OF WAY 1 5 FAILURE TO YIELD RIGHT OF WAY 1 6 DRIVER DISTRACTED - EXPLAIN IN NARRATIVE 5 7 ENGINE FAILURE OR DEFECTIVE 3 8 FOLLOWING TOO CLOSELY 1 9 RAN OFF ROAD RIGHT 1   === SVG Curva ROC ===  2025-09-26T12:34:06.171964 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ </p>"},{"location":"Metrics/main/#matriz","title":"Matriz","text":"Sa\u00edda <p>Formato do dataset: (53943, 11) Primary Factor Primary Factor Num 0 OTHER (DRIVER) - EXPLAIN IN NARRATIVE 0 1 FOLLOWING TOO CLOSELY 1 2 DISREGARD SIGNAL/REG SIGN 1 3 FAILURE TO YIELD RIGHT OF WAY 1 4 FAILURE TO YIELD RIGHT OF WAY 1 5 FAILURE TO YIELD RIGHT OF WAY 1 6 DRIVER DISTRACTED - EXPLAIN IN NARRATIVE 5 7 ENGINE FAILURE OR DEFECTIVE 3 8 FOLLOWING TOO CLOSELY 1 9 RAN OFF ROAD RIGHT 1 Accuracy: 0.995 Precis\u00e3o: 0.035 Recall: 0.074 F1-Score: 0.048  === SVG Matriz de Confus\u00e3o ===  2025-09-26T12:34:10.215114 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ </p>"},{"location":"arvore-decisao/main/","title":"Arvore de Decis\u00e3o","text":""},{"location":"arvore-decisao/main/#exercicio-1-arvore-de-decisao","title":"Exercicio 1 Arvore de decisao","text":"<p>Esse exercicio \u00e9 baseado no dataset Crash Car do Kaggle. O objetivo \u00e9 analisar a base de dados limp\u00e1-la, e no final construir um modelo de \u00e1rvore de decis\u00e3o</p>"},{"location":"arvore-decisao/main/#etapa-1-analise-e-instalacao-dos-dados","title":"Etapa 1 - Analise e instala\u00e7\u00e3o dos dados","text":"<p>O dataset foi carregado a partir de um arquivo Excel, contendo informa\u00e7\u00f5es como tipo de colis\u00e3o, tipo de les\u00e3o, dia da semana, fatores prim\u00e1rios do acidente, data, hora e localiza\u00e7\u00e3o.</p>"},{"location":"arvore-decisao/main/#carregando-os-dados","title":"Carregando os dados","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11)</p> <pre><code>import pandas as pd\n# Ler o arquivo corretamente (apenas )\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n\n# Visualiza\u00e7\u00e3o inicial da base de dados\nprint('Formato do dataset:', df.shape)\n</code></pre> <p>O dataset possui 53943 linha e 11 colunas.</p>"},{"location":"arvore-decisao/main/#as-bibiliotecas-utilizadas","title":"As bibiliotecas utilizadas","text":"<pre><code>    import matplotlib.pyplot as plt\n    import pandas as pd\n    from io import StringIO, BytesIO\n    from sklearn.model_selection import train_test_split\n    from sklearn.tree import DecisionTreeClassifier, plot_tree\n    from sklearn.metrics import confusion_matrix, accuracy_score\n    from sklearn.preprocessing import StandardScaler\n    from sklearn import tree\n</code></pre>"},{"location":"arvore-decisao/main/#explicacao-dos-tipos-de-dados","title":"Explica\u00e7\u00e3o dos tipos de dados","text":"tipo de dadosC\u00f3digo <p>Year : int64 </p> <p>Month : int64 </p> <p>Day : int64 </p> <p>Weekend? : object </p> <p>Hour : float64 </p> <p>Collision Type : object </p> <p>Injury Type : object </p> <p>Primary Factor : object </p> <p>Reported_Location : object </p> <p>Latitude : float64 </p> <p>Longitude : float64 </p> <pre><code>    for col in df:\n    print(col, \":\", df[col].dtype, \"\\n\")\n</code></pre> <p>Explica\u00e7\u00e3o</p> <p>Int64: Dados num\u00e9ricos inteiros, como Year, Month, Day, Hour e Latitude. Object: Dados categ\u00f3ricos ou textuais, como Collision Type, Injury Type, Weekend?, Primary Factor e Time. FLoat64: Dados num\u00e9ricos com casas decimais, como Longitude, Latitude e Hora.</p>"},{"location":"arvore-decisao/main/#estatisticas-descritivas-dos-numericos","title":"Estatisticas descritivas dos num\u00e9ricos","text":"Sa\u00eddaC\u00f3digo <p>Formato do dataset: (53943, 11) Estat\u00edsticas das colunas num\u00e9ricas:</p> Year Month Day Hour Latitude 18941 2011 2 6 1600.0 39.164240 34616 2007 7 3 1800.0 39.166640 18593 2011 8 3 1600.0 39.164700 3916 2015 11 6 1000.0 39.164240 14110 2012 10 1 100.0 39.167191 31033 2008 10 6 1300.0 39.164304 27957 2009 10 5 700.0 39.135552 13273 2012 7 4 1700.0 39.179040 34111 2007 1 6 2300.0 39.171680 45416 2004 12 4 1800.0 39.194144 <pre><code># Estat\u00edsticas descritivas das colunas num\u00e9ricas\nprint('Estat\u00edsticas das colunas num\u00e9ricas:')\nprint(df[['Year', 'Month', 'Day', 'Hour', 'Latitude']].describe())\n</code></pre>"},{"location":"arvore-decisao/main/#visualizacao-dos-dados","title":"Visualiza\u00e7\u00e3o dos dados","text":"2025-09-26T12:34:25.642771 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ 2025-09-26T12:34:25.707631 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <p>Visualiza\u00e7\u00f5es: Foram criados gr\u00e1ficos de barras para o n\u00famero de acidentes por tipo de ve\u00edculo e por gravidade (fatal/n\u00e3o fatal), facilitando a compreens\u00e3o dos dados.</p>"},{"location":"arvore-decisao/main/#exploracao-inicial-dos-dados","title":"Explora\u00e7\u00e3o inicial dos dados","text":"<pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n\n# Visualiza\u00e7\u00e3o inicial da base de dados\nprint(f'Formato do dataset: {df.shape}&lt;br&gt;')\n\n# Explica\u00e7\u00e3o de tipo de dado em cada coluna\nfor col in df:\n    print(df[col].head(1), \"&lt;br&gt;\")\nprint('Valores nulos por coluna:')\nprint(df.isnull().sum(), \"&lt;br&gt;\")\n\n\n################################################\n# Estat\u00edsticas descritivas das colunas num\u00e9ricas\nprint('Estat\u00edsticas das colunas num\u00e9ricas:')\nprint(df[['Year', 'Month', 'Day', 'Hour', 'Latitude']].describe())\n</code></pre>"},{"location":"arvore-decisao/main/#etapa-2","title":"Etapa 2","text":""},{"location":"arvore-decisao/main/#normalizacao-de-dados-categoricos-em-numericos","title":"Normaliza\u00e7\u00e3o de dados categ\u00f3ricos em num\u00e9ricos","text":"Tipo de Colis\u00e3oTipo de Les\u00e3oDia da semanaMotivo les\u00e3o Sa\u00eddaC\u00f3digo Collision Type Collision Type Num 0 2-Car 1 1 2-Car 1 2 2-Car 1 3 2-Car 1 4 2-Car 1 5 2-Car 1 6 2-Car 1 7 1-Car 1 8 2-Car 1 9 1-Car 1 <pre><code>def collision_to_num(collision):\n    if collision == '1-Car' or collision == '2-Car' or collision == '3+ Cars':\n        return 1\n    elif collision == 'Moped/Motorcycle':\n        return 2\n    elif collision == 'Bus':\n        return 3\n    elif collision == 'Pedestrian':\n        return 4\n    elif collision == 'Cyclist':\n        return 5\n    else:\n        return 0\ndf['Collision Type Num'] = df['Collision Type'].apply(collision_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Injury Type Injury Type Num 0 No injury/unknown 0 1 No injury/unknown 0 2 Non-incapacitating 0 3 Non-incapacitating 0 4 No injury/unknown 0 5 No injury/unknown 0 6 No injury/unknown 0 7 Incapacitating 0 8 No injury/unknown 0 9 No injury/unknown 0 <pre><code>def injury_to_num(injury):\n    if injury == 'Fatal':\n        return 1\n    else:\n        return 0\n\ndf['Injury Type Num'] = df['Injury Type'].apply(injury_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Weekend? Weekend Num 0 Weekday 2 1 Weekday 2 2 Weekend 1 3 Weekend 1 4 Weekend 1 5 Weekday 2 6 Weekday 2 7 Weekday 2 8 Weekend 1 9 Weekend 1 <pre><code>def weekend_to_num(value):\n    if str(value).lower() == 'weekend':\n        return 1\n    elif str(value).lower() == 'weekday':\n        return 2\n    else:\n        return 0\ndf['Weekend Num'] = df['Weekend?'].apply(weekend_to_num)\n</code></pre> Sa\u00eddaC\u00f3digo Primary Factor Primary Factor Num 0 OTHER (DRIVER) - EXPLAIN IN NARRATIVE 0 1 FOLLOWING TOO CLOSELY 1 2 DISREGARD SIGNAL/REG SIGN 1 3 FAILURE TO YIELD RIGHT OF WAY 1 4 FAILURE TO YIELD RIGHT OF WAY 1 5 FAILURE TO YIELD RIGHT OF WAY 1 6 DRIVER DISTRACTED - EXPLAIN IN NARRATIVE 5 7 ENGINE FAILURE OR DEFECTIVE 3 8 FOLLOWING TOO CLOSELY 1 9 RAN OFF ROAD RIGHT 1 <p>1 = Erros de julgamento do motorista 2 = Velocidade / comportamento arriscado 3 = Falhas mec\u00e2nicas 4 = Condi\u00e7\u00f5es da estrada / ambientais 5 = Distra\u00e7\u00f5es 6 = Uso de Subst\u00e2ncias 7 = Fatores diversos 8 = Outros</p> <pre><code>def primary_factor_to_num(factor):\n    if factor == 'Erros de julgamento do motorista':\n        return 1\n    elif factor == 'Velocidade / comportamento arriscado':\n        return 2\n    elif factor == 'Falhas mec\u00e2nicas':\n        return 3\n    elif factor == 'Condi\u00e7\u00f5es da estrada / ambientais':\n        return 4\n    elif factor == 'Distra\u00e7\u00f5es':\n        return 5\n    elif factor == 'Uso de Subst\u00e2ncias':\n        return 6\n    elif factor == 'Fatores diversos':\n        return 7\n    else:\n        return 0  # Outros / n\u00e3o especificado\ndf['Primary Factor Num'] = df['Primary Factor'].apply(primary_factor_to_num)\n</code></pre> <p>Convers\u00e3o de vari\u00e1veis categ\u00f3ricas em num\u00e9ricas: tipo de colis\u00e3o, tipo de les\u00e3o, dia da semana e fator prim\u00e1rio foram transformados em vari\u00e1veis num\u00e9ricas para facilitar os proximos processos e estabelecer uma normaliza\u00e7\u00e3o.</p>"},{"location":"arvore-decisao/main/#limpeza","title":"Limpeza","text":"Sa\u00eddaC\u00f3digo <p>Tamanho do dataset antes remo\u00e7\u00e3o de valores ausentes (53943, 11) Tamanho do dataset ap\u00f3s remo\u00e7\u00e3o de valores ausentes (52582, 11)</p> <pre><code>print(df.shape)\nprint(\"Tamanho do dataset antes remo\u00e7\u00e3o de valores ausentes\")\ndf = df.dropna()\nprint(df.shape)\nprint(\"Tamanho do dataset ap\u00f3s remo\u00e7\u00e3o de valores ausentes\")\n</code></pre> <p>Todos os registros com valores ausentes foram removidos, garantindo a integridade dos dados para o treinamento do modelo</p>"},{"location":"arvore-decisao/main/#etapa-3","title":"Etapa 3","text":""},{"location":"arvore-decisao/main/#separacao-em-treino-e-teste-arvore-de-decisao","title":"Separa\u00e7\u00e3o em treino e teste / Arvore de Decis\u00e3o","text":"<p>Os dados foram divididos em conjuntos de treino 80% e teste 20% de forma estratificada, preservando a propor\u00e7\u00e3o das classes. A distribui\u00e7\u00e3o das classes foi feita para ambos os conjuntos garantindo que o modelo fosse treinado e avaliado de forma justa.</p> Sa\u00eddaC\u00f3digo <p>(53943, 15) Treino: 42065 amostras Teste: 10517 amostras Propor\u00e7\u00e3o: 80.0% treino, 20.0% teste</p> <p>Distribui\u00e7\u00e3o das classes - Treino:</p> Collision Type Num count 1 39744 2 799 3 673 4 479 5 370 <p>Distribui\u00e7\u00e3o das classes - Teste:</p> Collision Type Num count 1 9936 2 200 3 168 4 120 5 93 <pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n#Transformando Collision Type em num\u00e9rico\ndef collision_to_num(collision):\n    if collision == '1-Car' or collision == '2-Car' or collision == '3+ Cars':\n        return 1\n    elif collision == 'Moped/Motorcycle':\n        return 2\n    elif collision == 'Bus':\n        return 3\n    elif collision == 'Pedestrian':\n        return 4\n    elif collision == 'Cyclist':\n        return 5\n    else:\n        return 0\ndf['Collision Type Num'] = df['Collision Type'].apply(collision_to_num)\n#Transformando Injury Type em num\u00e9rico\ndef injury_to_num(injury):\n    if injury == 'Fatal':\n        return 1\n    else:\n        return 0\ndf['Injury Type Num'] = df['Injury Type'].apply(injury_to_num)\n#Transformando Weekend? em num\u00e9rico \ndef weekend_to_num(value):\n    if str(value).lower() == 'weekend':\n        return 1\n    elif str(value).lower() == 'weekday':\n        return 2\n    else:\n        return 0\ndf['Weekend Num'] = df['Weekend?'].apply(weekend_to_num)\ndef primary_factor_to_num(factor):\n    if factor == \"FAILURE TO YIELD RIGHT OF WAY\" or \\\n        factor == \"FOLLOWING TOO CLOSELY\" or \\\n        factor == \"IMPROPER TURNING\" or \\\n        factor == \"UNSAFE BACKING\" or \\\n        factor == \"RAN OFF ROAD RIGHT\" or \\\n        factor == \"DISREGARD SIGNAL/REG SIGN\" or \\\n        factor == \"LEFT OF CENTER\" or \\\n        factor == \"IMPROPER LANE USAGE\" or \\\n        factor == \"UNSAFE LANE MOVEMENT\" or \\\n        factor == \"OVERCORRECTING/OVERSTEERING\" or \\\n        factor == \"IMPROPER PASSING\" or \\\n        factor == \"WRONG WAY ON ONE WAY\" or \\\n        factor == \"VIOLATION OF LICENSE RESTRICTION\":\n        return 1\n\n    elif factor == 'SPEED TOO FAST FOR WEATHER CONDITIONS' or \\\n            factor == 'UNSAFE SPEED':\n        return 2\n\n    elif factor == \"BRAKE FAILURE OR DEFECTIVE\" or \\\n            factor == \"TIRE FAILURE OR DEFECTIVE\" or \\\n            factor == \"ACCELERATOR FAILURE OR DEFECTIVE\" or \\\n            factor == \"STEERING FAILURE\" or \\\n            factor == \"ENGINE FAILURE OR DEFECTIVE\" or \\\n            factor == \"HEADLIGHT DEFECTIVE OR NOT ON\" or \\\n            factor == \"OTHER LIGHTS DEFECTIVE\" or \\\n            factor == \"TOW HITCH FAILURE\":\n        return 3\n\n    elif factor == \"ROADWAY SURFACE CONDITION\" or \\\n            factor == \"GLARE\" or \\\n            factor == \"HOLES/RUTS IN SURFACE\" or \\\n            factor == \"TRAFFIC CONTROL INOPERATIVE/MISSING/OBSC\" or \\\n            factor == \"ROAD UNDER CONSTRUCTION\" or \\\n            factor == \"SHOULDER DEFECTIVE\" or \\\n            factor == \"LANE MARKING OBSCURED\" or \\\n            factor == \"UTILITY WORK\" or \\\n            factor == \"SEVERE CROSSWINDS\":\n        return 4\n\n    elif factor == \"DRIVER DISTRACTED - EXPLAIN IN NARRATIVE\" or \\\n            factor == \"CELL PHONE USAGE\" or \\\n            factor == \"PASSENGER DISTRACTION\":\n        return 5\n\n    elif factor == \"ALCOHOLIC BEVERAGES\" or \\\n            factor == \"PRESCRIPTION DRUGS\" or \\\n            factor == \"ILLEGAL DRUGS\" or \\\n            factor == \"DRIVER ASLEEP OR FATIGUED\" or \\\n            factor == \"DRIVER ILLNESS\":\n        return 6\n    elif factor == \"ANIMAL/OBJECT IN ROADWAY\" or \\\n            factor == \"SEVERE CROSSWINDS\" or \\\n            factor == \"INSECURE/LEAKY LOAD\" or \\\n            factor == \"OVERSIZE/OVERWEIGHT LOAD\":\n        return 7 \n    else:\n        return 0\ndf['Primary Factor Num'] = df['Primary Factor'].apply(primary_factor_to_num)\n\n#Limpeza\nprint(df.shape)\ndf = df.dropna()\n\n\n#Definindo features \nfeatures = ['Injury Type Num', 'Weekend Num', 'Primary Factor Num', 'Year', 'Month', 'Day', 'Hour', 'Latitude']\n#coluna que vamos prever com a \u00e1rvore de decis\u00e3o\ntarget = 'Collision Type Num' \n\nx = df[features]\ny = df[target]\n\n#Dividindo em treino e teste 80% treino 20% teste\nx_train, x_test, y_train, y_test = train_test_split(\n    x, y, test_size=0.2, random_state=42, stratify=y\n)\n\nprint(f\"&lt;br&gt;Treino: {x_train.shape[0]} amostras\")\nprint(f\"&lt;br&gt;Teste: {x_test.shape[0]} amostras\")\nprint(f\"&lt;br&gt;Propor\u00e7\u00e3o: {x_train.shape[0]/x.shape[0]*100:.1f}% treino, {x_test.shape[0]/x.shape[0]*100:.1f}% teste\\n\")\n\nprint(\"Distribui\u00e7\u00e3o das classes - Treino:\\n\")\nprint(y_train.value_counts().to_markdown(), \"\\n\")\n\nprint(\"Distribui\u00e7\u00e3o das classes - Teste:\\n\")\nprint(y_test.value_counts().to_markdown(), \"\\n\")\n</code></pre>"},{"location":"arvore-decisao/main/#etapa-4","title":"Etapa 4","text":""},{"location":"arvore-decisao/main/#treinamento-do-modelo","title":"Treinamento do modelo","text":"<p>O modelo de \u00c1rvore de Decis\u00e3o foi treinado utilizando as vari\u00e1veis mais relevantes do dataset:</p> <p>Features utilizadas: Injury type (Tipo de les\u00e3o), dia da semana, Primary factor (fator prim\u00e1rio), ano, m\u00eas, dia, hora e latitude. Target:Collision Type (Tipo de colis\u00e3o).</p> Sa\u00eddaC\u00f3digo <p>(53943, 15) Import\u00e2ncia das Features:</p> Feature Import\u00e2ncia 2 Primary Factor Num 0.237794 3 Year 0.218050 4 Month 0.198402 0 Injury Type Num 0.137037 7 Latitude 0.133980 6 Hour 0.068335 5 Day 0.006403 1 Weekend Num 0.000000 <p></p> <pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\ndf = pd.read_excel(\"docs/arvore-decisao/crashcar.xlsx\")\n#Transformando Collision Type em num\u00e9rico\ndef collision_to_num(collision):\n    if collision == '1-Car' or collision == '2-Car' or collision == '3+ Cars':\n        return 1\n    elif collision == 'Moped/Motorcycle':\n        return 2\n    elif collision == 'Bus':\n        return 3\n    elif collision == 'Pedestrian':\n        return 4\n    elif collision == 'Cyclist':\n        return 5\n    else:\n        return 0\ndf['Collision Type Num'] = df['Collision Type'].apply(collision_to_num)\n#Transformando Injury Type em num\u00e9rico\ndef injury_to_num(injury):\n    if injury == 'Fatal':\n        return 1\n    else:\n        return 0\ndf['Injury Type Num'] = df['Injury Type'].apply(injury_to_num)\n#Transformando Weekend? em num\u00e9rico \ndef weekend_to_num(value):\n    if str(value).lower() == 'weekend':\n        return 1\n    elif str(value).lower() == 'weekday':\n        return 2\n    else:\n        return 0\ndf['Weekend Num'] = df['Weekend?'].apply(weekend_to_num)\ndef primary_factor_to_num(factor):\n    if factor == \"FAILURE TO YIELD RIGHT OF WAY\" or \\\n        factor == \"FOLLOWING TOO CLOSELY\" or \\\n        factor == \"IMPROPER TURNING\" or \\\n        factor == \"UNSAFE BACKING\" or \\\n        factor == \"RAN OFF ROAD RIGHT\" or \\\n        factor == \"DISREGARD SIGNAL/REG SIGN\" or \\\n        factor == \"LEFT OF CENTER\" or \\\n        factor == \"IMPROPER LANE USAGE\" or \\\n        factor == \"UNSAFE LANE MOVEMENT\" or \\\n        factor == \"OVERCORRECTING/OVERSTEERING\" or \\\n        factor == \"IMPROPER PASSING\" or \\\n        factor == \"WRONG WAY ON ONE WAY\" or \\\n        factor == \"VIOLATION OF LICENSE RESTRICTION\":\n        return 1\n\n    elif factor == 'SPEED TOO FAST FOR WEATHER CONDITIONS' or \\\n            factor == 'UNSAFE SPEED':\n        return 2\n\n    elif factor == \"BRAKE FAILURE OR DEFECTIVE\" or \\\n            factor == \"TIRE FAILURE OR DEFECTIVE\" or \\\n            factor == \"ACCELERATOR FAILURE OR DEFECTIVE\" or \\\n            factor == \"STEERING FAILURE\" or \\\n            factor == \"ENGINE FAILURE OR DEFECTIVE\" or \\\n            factor == \"HEADLIGHT DEFECTIVE OR NOT ON\" or \\\n            factor == \"OTHER LIGHTS DEFECTIVE\" or \\\n            factor == \"TOW HITCH FAILURE\":\n        return 3\n\n    elif factor == \"ROADWAY SURFACE CONDITION\" or \\\n            factor == \"GLARE\" or \\\n            factor == \"HOLES/RUTS IN SURFACE\" or \\\n            factor == \"TRAFFIC CONTROL INOPERATIVE/MISSING/OBSC\" or \\\n            factor == \"ROAD UNDER CONSTRUCTION\" or \\\n            factor == \"SHOULDER DEFECTIVE\" or \\\n            factor == \"LANE MARKING OBSCURED\" or \\\n            factor == \"UTILITY WORK\" or \\\n            factor == \"SEVERE CROSSWINDS\":\n        return 4\n\n    elif factor == \"DRIVER DISTRACTED - EXPLAIN IN NARRATIVE\" or \\\n            factor == \"CELL PHONE USAGE\" or \\\n            factor == \"PASSENGER DISTRACTION\":\n        return 5\n\n    elif factor == \"ALCOHOLIC BEVERAGES\" or \\\n            factor == \"PRESCRIPTION DRUGS\" or \\\n            factor == \"ILLEGAL DRUGS\" or \\\n            factor == \"DRIVER ASLEEP OR FATIGUED\" or \\\n            factor == \"DRIVER ILLNESS\":\n        return 6\n    elif factor == \"ANIMAL/OBJECT IN ROADWAY\" or \\\n            factor == \"SEVERE CROSSWINDS\" or \\\n            factor == \"INSECURE/LEAKY LOAD\" or \\\n            factor == \"OVERSIZE/OVERWEIGHT LOAD\":\n        return 7 \n    else:\n        return 0\ndf['Primary Factor Num'] = df['Primary Factor'].apply(primary_factor_to_num)\nprint(df.shape)\ndf = df.dropna()\nfeatures = ['Injury Type Num', 'Weekend Num', 'Primary Factor Num', 'Year', 'Month', 'Day', 'Hour', 'Latitude']\ntarget = 'Collision Type Num' \nx = df[features]\ny = df[target]\nx_train, x_test, y_train, y_test = train_test_split(\n    x, y, test_size=0.2, random_state=42, stratify=y\n)\n\n###############################\n###############################\n#Treinamento do Decision Tree\n###############################\n###############################\nclf = DecisionTreeClassifier(random_state=42, max_depth=5)\nclf.fit(x_train, y_train)\n\n#acur\u00e1cia\ny_pred = clf.predict(x_test)\n\n#Import\u00e2ncia das features\nfeature_importance = pd.DataFrame({\n    \"Feature\": x_train.columns,\n    \"Import\u00e2ncia\": clf.feature_importances_\n}).sort_values(by=\"Import\u00e2ncia\", ascending=False)\nprint(\"&lt;br&gt;Import\u00e2ncia das Features:\")\nprint(feature_importance.to_html() + \"&lt;br&gt;\")\n</code></pre>"},{"location":"arvore-decisao/main/#arvore-de-decisao","title":"Arvore de decis\u00e3o","text":"Sa\u00eddaC\u00f3digo <p>(53943, 15)  2025-09-26T12:34:56.673551 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ Acur\u00e1cia do modelo: 0.9446 </p> <pre><code># ==========================\n#Visualiza\u00e7\u00e3o da \u00e1rvore em SVG\n# ==========================\nplt.figure(figsize=(18,10), dpi=150)\ntree.plot_tree(\n    clf,\n    feature_names=features,\n    class_names=[str(c) for c in clf.classes_],\n    filled=True,\n    rounded=True,\n    fontsize=10\n)\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", transparent=False)\nsvg_data = buffer.getvalue().decode(\"utf-8\")\nprint(svg_data)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"&lt;br&gt;Acur\u00e1cia do modelo: {accuracy:.4f}\")\n</code></pre> <p>O projeto cumpriu todas as etapas propostas: explora\u00e7\u00e3o, pr\u00e9-processamento, divis\u00e3o, treinamento, avalia\u00e7\u00e3o e documenta\u00e7\u00e3o. O modelo de \u00c1rvore de Decis\u00e3o mostrou-se eficiente para a tarefa de classifica\u00e7\u00e3o do tipo de colis\u00e3o</p>"},{"location":"projeto/main/","title":"Projeto","text":"<p>Aqui vai toda a documenta\u00e7\u00e3o do projeto, incluindo o que j\u00e1 foi feito e o que falta fazer. Teste</p>"},{"location":"roteiro1/main/","title":"Roteiro 1","text":""},{"location":"roteiro1/main/#objetivo","title":"Objetivo","text":"<p>Aqui vai o objetivo macro do roteiro. Por que estamos fazendo o que estamos fazendo?</p>"},{"location":"roteiro1/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":"<p>Os pontos \"tarefas\" s\u00e3o os passos que devem ser seguidos para a realiza\u00e7\u00e3o do roteiro. Eles devem ser claros e objetivos. Com evid\u00eancias claras de que foram realizados.</p>"},{"location":"roteiro1/main/#tarefa-1","title":"Tarefa 1","text":"<p>Instalando o MAAS:</p> sudo snap install maas --channel=3.5/Stable <p></p> <p>Dashboard do MAAS</p> <p>Conforme ilustrado acima, a tela inicial do MAAS apresenta um dashboard com informa\u00e7\u00f5es sobre o estado atual dos servidores gerenciados. O dashboard \u00e9 composto por diversos pain\u00e9is, cada um exibindo informa\u00e7\u00f5es sobre um aspecto espec\u00edfico do ambiente gerenciado. Os pain\u00e9is podem ser configurados e personalizados de acordo com as necessidades do usu\u00e1rio.</p>"},{"location":"roteiro1/main/#tarefa-2","title":"Tarefa 2","text":""},{"location":"roteiro1/main/#app","title":"App","text":""},{"location":"roteiro1/main/#tarefa-1_1","title":"Tarefa 1","text":""},{"location":"roteiro1/main/#tarefa-2_1","title":"Tarefa 2","text":"<p>Exemplo de diagrama</p> <pre><code>architecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service disk1(disk)[Storage] in api\n    service disk2(disk)[Storage] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db</code></pre> <p>Mermaid</p>"},{"location":"roteiro1/main/#questionario-projeto-ou-plano","title":"Question\u00e1rio, Projeto ou Plano","text":"<p>Esse se\u00e7\u00e3o deve ser preenchida apenas se houver demanda do roteiro.</p>"},{"location":"roteiro1/main/#discussoes","title":"Discuss\u00f5es","text":"<p>Quais as dificuldades encontradas? O que foi mais f\u00e1cil? O que foi mais dif\u00edcil?</p>"},{"location":"roteiro1/main/#conclusao","title":"Conclus\u00e3o","text":"<p>O que foi poss\u00edvel concluir com a realiza\u00e7\u00e3o do roteiro?</p>"},{"location":"roteiro2/main/","title":"Roteiro 2","text":""},{"location":"roteiro2/main/#diagrama-de-classes-do-banco","title":"Diagrama de Classes do Banco","text":"<pre><code>classDiagram\n    class Conta {\n        - String id\n        # double saldo\n        - Cliente cliente\n        + sacar(double valor)\n        + depositar(double valor)\n    }\n    class Cliente {\n        - String id\n        - String nome\n        - List&lt;Conta&gt; contas\n    }\n    class PessoaFisica {\n        - String cpf\n    }\n    class PessoaJuridica {\n        - String cnpj\n    }\n    class ContaCorrente {\n        - double limite\n        + sacar(double valor)\n    }\n    class ContaPoupanca {\n        + sacar(double valor)\n    }\n    Conta *-- Cliente\n    Conta &lt;|-- ContaCorrente\n    Conta &lt;|-- ContaPoupanca\n    Cliente &lt;|-- PessoaFisica\n    Cliente &lt;|-- PessoaJuridica</code></pre>"},{"location":"roteiro2/main/#diagrama-de-sequencia-de-autorizacao","title":"Diagrama de Seq\u00fc\u00eancia de Autoriza\u00e7\u00e3o","text":"<pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Auth Service: request with token\n  Auth Service-&gt;&gt;Auth Service: decodes the token and extracts claims\n  Auth Service-&gt;&gt;Auth Service: verifies permissions\n  critical allowed\n    Auth Service-&gt;&gt;Secured Resource: authorizes the request\n    Secured Resource-&gt;&gt;User: returns the response\n  option denied\n    Auth Service--&gt;&gt;User: unauthorized message\n  end  </code></pre>"},{"location":"roteiro3/main/","title":"Roteiro 3","text":"<p>Running the code below in Browser (Woooooowwwwww!!!!!!). <sup>1</sup></p> <p> </p> Editor (session: default) Run <pre>import ssl\nimport pandas as pd\n\ndf = pd.DataFrame()\ndf['AAPL'] = pd.Series([1, 2, 3])\ndf['MSFT'] = pd.Series([4, 5, 6])\ndf['GOOGL'] = pd.Series([7, 8, 9])\n\nprint(df)\n</pre> Output Clear <pre></pre> <p></p> <ol> <li> <p>Pyodide \u21a9</p> </li> </ol>"},{"location":"roteiro4/main/","title":"Roteiro 4","text":"<p>Se chegou aqui, \u00e9 porque voc\u00ea est\u00e1 interessado em saber mais. Logo, de brinde, como rodar um c\u00f3digo <code>Python</code> aqui.</p> 2025-09-26T12:34:57.576689 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ 2025-09-26T12:34:58.455876 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <p>Markdown-exec \u00e9 uma extens\u00e3o do Markdown que permite executar c\u00f3digo Python diretamente no Markdown. Isso \u00e9 \u00fatil para gerar resultados din\u00e2micos ou executar scripts de forma interativa.</p>"}]}